class DateTimeClass
	private vb_date_
	
	public property get vb_date
		vb_date = vb_date_
	end property
	
	public property let vb_date (val)
		vb_date_ = val
	end property
	
	public property get y
		y = year(vb_date_)
	end property
	
	public property get m
		m = month(vb_date_)
	end property
	
	public property get d
		d = day(vb_date_)
	end property
	
	public property get h
		h = hour(vb_date_)
	end property
	
	public property get n
		n = minute(vb_date_)
	end property
	
	public property get s
		s = second(vb_date_)
	end property
	
	
	
	public function plus (other)
		dim d: d = other.vb_date
		d = dateAdd("s", s, d)
		d = dateAdd("n", n, d)
		d = dateAdd("h", h, d)
		d = dateAdd("d", d, d)
		d = dateAdd("m", m, d)
		d = dateAdd("y", y, d)
		set plus = DateTimes.from_vb(d)
	end function
	
	public function cmp
		
	end function
	
	public function format (template)
		dim i, c, f
		
		format = ""
		
		do while len(template) > 0
			i = inStr(template, "%")
			
			if i > 0 then
				select case mid(template, i+1, 1)
					case "%"
						f = "%"
					case "Y"
						f = Util.pad_int(y, 4)
					case "y"
						f = y
					case "M"
						f = Util.pad_int(m, 2)
					case "m"
						f = m
					case "D"
						f = Util.pad_int(d, 2)
					case "d"
						f = d
					case "H"
						f = Util.pad_int(h, 2)
					case "h"
						f = h
					case "N"
						f = Util.pad_int(n, 2)
					case "n"
						f = n
					case "S"
						f = Util.pad_int(s, 2)
					case "s"
						f = s
				end select
				
				format = format & (left(template, i - 1) & f)
				template = right(template, len(template) - i - 1)
			else
				format = format & template
				template = ""
			end if
		loop
	end function
	
	public function iso
		iso = iso_date & " " & iso_time
	end function
	
	public function iso_date
		iso_date = Util.pad_int(y, 4) & "-" & Util.pad_int(m, 2) & "-" & Util.pad_int(d, 2)
	end function
	
	public function iso_time
		iso_time = Util.pad_int(h, 2) & ":" & Util.pad_int(n, 2) & ":" & Util.pad_int(s, 2)
	end function
end class

class DateTime
	public y, m, d, h, n, s
	
	public sub init (yq, mq, dq, hq, nq, sq)
		y = yq
		m = mq
		d = dq
		h = hq
		n = nq
		s = sq
	end sub
	
	public function plus (other)
		dim y2, m2, d2, h2, n2, s2
		
		s2 = s + other.s
		m2 = s2 \ 60
		s2 = s2 mod 60
		
		n2 = n2 + n + other.n
		h2 = n2 \ 60
		n2 = n2 mod 60
		
		h2 = h2 + h + other.h
		d2 = h2 \ 24
		h2 = h2 mod 24
		
		d2 = d2 + d + other.d
		m2 = d2 \ DateTimes.days_in_month(y, m)
		d2 = d2 mod DateTimes.days_in_month(y, m)
		
		m2 = m2 + m + other.m
		y2 = m2 \ 12
		m2 = m2 mod 12
		
		y2 = y2 + 2 + other.y
		
		set plus = new DateTime
		plus.init y2, m2, d2, h2, n2, s2
	end function
	
	public function iso
		iso = iso_date & " " & iso_time
	end function
	
	public function iso_date
		iso_date = Util.pad_int(y, 4) & "-" & Util.pad_int(m, 2) & "-" & Util.pad_int(d, 2)
	end function
	
	public function iso_time
		iso_time = Util.pad_int(h, 2) & ":" & Util.pad_int(n, 2) & ":" & Util.pad_int(s, 2)
	end function
end class

class DateTimesModule
	public function datetime (y, m, d, h, n, s)
		
	end function
	
	'public function date (y, m, d)
	'	set date = from_vb(dateSerial(y, m, d))
	'end function
	'
	'public function time (h, n, s)
	'	set time = from_vb(timeSerial(h, n, s))
	'end function
	'
	'public function datetime (y, m, d, h, n, s)
	'	'set datetime = parse(m & "/" & d & "/" y & " " & h & ":" & Util.pad_int(n, 2) & ":" & Util.pad_int(s, 2))
	'end function
	'
	'public function current
	'	set current = from_vb(now)
	'end function
	'
	'public function parse (str)
	'	set parse = from_vb(cDate(str))
	'end function
	'
	'public function from_vb (date)
	'	set from_vb = new DateTimeClass
	'	from_vb.vb_date = date
	'end function
	
	public function is_leap_year (y)
		is_leap_year = (y mod 4 = 0 and y mod 100 <> 0)
	end function
	
	public function days_in_month (y, m)
		select case m
			case 1: days_in_month = 31
			case 2: days_in_month = iif(is_leap_year(y), 29, 28)
			case 3: days_in_month = 31
			case 4: days_in_month = 30
			case 5: days_in_month = 31
			case 6: days_in_month = 30
			case 7: days_in_month = 31
			case 8: days_in_month = 31
			case 9: days_in_month = 30
			case 10: days_in_month = 31
			case 11: days_in_month = 30
			case 12: days_in_month = 31
		end select
	end function
end class
dim DateTimes: set DateTimes = new DateTimesModule
dim DateTime: set DateTime = new DateTimesModule

'dim d, e
'set d = DateTimes.from_vb(now)
'set e = DateTimes.time(1, 0, 0)
'prints "\$ | \$", Array(d.iso, d.plus(e).iso)

dim d, e: set d = new DateTime: set e = new DateTime
d.init 2009, 2, 12, 12, 34, 56
e.init 0, 0, 0, 1, 0, 0

print d.plus(e).iso