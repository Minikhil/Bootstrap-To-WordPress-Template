class IntClass
	private value_
	
	public function init (val)
'		Initializes the Int object with the given value, which can be any
'		number. If the number is not an integer, it is rounded toward negative
'		infinity, as in the vbscript int function.
		
		if val >= fix(val) then
			value_ = fix(val)
		else
			value_ = fix(val - 1)
		end if
		
		set init = me
	end function
	
	public default property get value
		value = value_
	end property
	
	public property let value (val)
		value_ = val
	end property
	
	public function humanize
'		Returns a string of the number in the format '[-]123,456'.
		
		humanize = formatNumber(value_, 0, TristateUseDefault, TristateFalse, TristateTrue)
		'                               ^Decimal places        ^Parenthesize negative numbers
		'                                  ^Leading zero for decimals         ^Group digits
	end function
	
	public function marshall
		marshall = value_
	end function
end class

class IntModule
	private non_digits_re_
	private property get non_digits_re
		if isEmpty(non_digits_re_) then
			set non_digits_re_ = new RegExp
			non_digits_re_.pattern = "[^\d]*"
			non_digits_re_.global = true
		end if
		set non_digits_re = non_digits_re_
	end property
	
	public default property get construct (val)
		set construct = (new IntClass).init(val)
	end property
	
	public function parse (val)
		on error resume next
		dim munged: munged = cLng(non_digits_re.replace(val, vbNullString))
		on error goto 0
		
		if isEmpty(munged) then
			err.clear
			parse = null
		else
			set parse = construct(munged)
		end if
	end function
	
	public function unmarshall (data)
		set unmarshall = construct(data)
	end function
end class
dim Int: set Int = new IntModule